@startuml
package Commons {
    Interface Manager
    Interface StorageController<T> {
        + T Query()
        + void Add()
        + void Remove()
        + void Update()
    }

    class UUID
    class AuthorUUID extends UUID
    class BookUUID extends UUID
    class OrganizationUUID extends UUID
}

package Article {
    enum MarkupType {
        Text
        Highlight
        Line
        Shape
        CustomRaster
        CustomVector
    }

    struct ArticleMarkup {
        MarkupType type
        String content
    }

    ArticleMarkup "1" o-- "1" MarkupType : contains

    struct Article {
        + String title
        + String content
        + List<ArticleMarkup> markups
    }

    Article "1" o-- "N" ArticleMarkup : contains
}

package Books.Book {
    struct Author {
        + Commons.AuthorUUID identifier
        + String name
    }
    Author "1" --- "1" Commons.AuthorUUID : contains

    struct Publisher {
        + Commons.OrganizationUUID identifier
        + String name
    }
    Publisher "1" --- "1" Commons.OrganizationUUID : contains

    struct PublishRev {
        + DateTime date
        + int rev
        + int print
    }

    struct Book {
        + Commons.BookUUID identifier
        + String title
        + List<Image> covers
        + List<Author> authors
        + List<Author> translators
        + Publisher publisher
        + int page
        + List<PublishRev> publishRevs
        + String isbn
    }
    Book "1" o-- "1" Commons.BookUUID : contains
    Book "1" o-- "N" Author : contains
    Book "1" o-- "1" Publisher : contains
    Book "1" o-- "N" PublishRev : contains

    ' BookDatabaseSubSystem

    class BookDatabaseManager implements Commons.Manager

    class BookDatabaseStorageController<T> implements Commons.StorageController
    BookDatabaseStorageController --- Books.Book.Book : use

    class BookDatabaseSubSystem {
        + {static} BookDatabaseManager bookDatabaseManager
        + {static} BookDatabaseStorageController bookDatabaseStorageController<T>
    }

    BookDatabaseSubSystem "1" --- "1" BookDatabaseManager : contains
    BookDatabaseSubSystem "1" --- "1" BookDatabaseStorageController : contains
}

class Image
Books.Book.Book "1" o-- "N" Image : contains

package Books.BookReview {
    struct BookReview extends Article.Article {
        + Books.Book.Book book
    }
    BookReview o-- Books.Book.Book : contains

    struct BookReviewBlob 
    BookReviewBlob "1" --- "N" BookReview

    class BookReviewManager implements Commons.Manager {
        + BookReviewBlob RequestQueryBookReviewBlob(any[] req)
    }

    BookReviewManager --- BookReviewBlob : use
    BookReviewManager --- BookReviewStorageController : use

    class BookReviewStorageQueryOptimizer {
        + void invoke()
    }
    class BookReviewStorageController<T> implements Commons.StorageController {
        + BookReviewStorageQueryOptimizer optimizer
    }
    BookReviewStorageController "1" o-- "1" BookReviewStorageQueryOptimizer : contains
    BookReviewStorageController --- BookReview.BookReview : use

    ' BookReview SubSystem

    class BookReviewSubSystem {
        + {static} BookReviewStorageController bookReviewStorageController
        + {static} BookReviewManager bookReviewManager
    }
    BookReviewSubSystem "1" o-- "1" BookReviewStorageController : contains
    BookReviewSubSystem "1" o-- "1" BookReviewManager : contains

}

package Books.BookSuggestion {
    class EmotionChecklist {
        + Dictionary<K, bool> checkList
        + String toPrompt()
    }

    enum BookSuggestionManualRequestType {
        Normal
        NewCategory
        EmotionBased
    }
    struct BookSuggestionManualRequest {
        + BookSuggestionManualRequestType type
        + String prompt
    }
    BookSuggestionManualRequest "1" o-- "1" BookSuggestionManualRequestType : contains
    EmotionChecklist --o BookSuggestionManualRequest : use

    struct BookSuggestion {}
    class BookSuggestionTask {}

    class BookSuggestionWorker {
        - BookSuggestionTask task
        - void run()
    }
    BookSuggestionWorker o-- BookSuggestionTask : contains
    BookSuggestionWorker --- BookSuggestion : use

    class BookSuggestionScheduler {
        + BookSuggestionWorker worker
        - void invoke()
    }

    BookSuggestionScheduler "1" o-- "1" BookSuggestionWorker : contains

    class BookSuggestionManager implements Commons.Manager {
        + {static} void InvokeBookSuggestionManual(BookSuggestionManualRequest req)
        + {static} void PushBookSuggestionRequestQueue(BookSuggestionManualRequest req)
    }
    BookSuggestionManager --- BookSuggestionManualRequest : use
    BookSuggestionManager --- BookSuggestionScheduler : use
    BookSuggestionManager --- BookSuggestionStorageController : use

    class BookSuggestionStorageController<T> implements Commons.StorageController {}
    BookSuggestionStorageController --- BookSuggestion : use

    class BookSuggestionSubSystem {
        + {static} BookSuggestionManager bookSuggestionManager
        + {static} BookSuggestionStorageController bookSuggestionStorageController
        + {static} List<BookSuggestionScheduler> bookSuggestionSchedulers
    }

    BookSuggestionSubSystem "1" o-- "1" BookSuggestionManager : contains
    BookSuggestionSubSystem "1" o-- "1" BookSuggestionStorageController : contains
    BookSuggestionSubSystem "1" o-- "N" BookSuggestionScheduler : contains
}
@enduml
