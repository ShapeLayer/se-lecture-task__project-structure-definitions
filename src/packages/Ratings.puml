@startuml
package Commons {
    Interface Manager
    Interface StorageController<T> {
        + T Query(void params)
        + void Add()
        + void Remove()
        + void Update()
    }

    class UUID
    class UserUUID extends UUID
}

package User.Commons {
    class User {}
}

package User.UserManagement {
    class UserSessionManager {}
}

package Ratings.Commons {
    class Tier {
        + String name
    }

    struct RatingTierMatch {
        + any[] ratingRange
        + Tier tier
    }
    RatingTierMatch "1" --- "1" Tier : contains

    struct Rating {
        + Commons.UserUUID identifier
        + any ratings
    }
    Rating "1" --- "1" Commons.UserUUID : contains
}

package Ratings.Management {
    class RatingManager implements Commons.Manager {
        + {static} List<RatingTierMatch> ratingTierMatch
        + {static} Rating GetCurrentUserRating()
    }
    RatingManager "1" --- "N" RatingTierMatch : contains
    RatingManager --- User.Commons.User : use
    RatingManager --- Rating : use
    RatingManager --- User.UserManagement.UserSessionManager : use
    RatingManager --- RatingStorageController : use

    class RatingStorageController<T> implements Commons.StorageController {}
    RatingStorageController --- Rating : use

    class RatingsSubSystem {
        + {static} RatingManager ratingManager
        + {static} RatingStorageController ratingStorageController
    }

    RatingsSubSystem "1" o-- "1" RatingManager : contains
    RatingsSubSystem "1" o-- "1" RatingStorageController : contains
}
@enduml
